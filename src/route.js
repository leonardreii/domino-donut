"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const token_service_1 = require("./services/token.service");
const driver_controller_1 = require("./controller/driver/driver.controller");
const customer_controller_1 = require("./controller/customer/customer.controller");
const order_controller_1 = require("./controller/order/order.controller");
const corporate_controller_1 = require("./controller/corporate/corporate.controller");
const user_controller_1 = require("./controller/user/user.controller");
const car_controller_1 = require("./controller/car/car.controller");
const login_controller_1 = require("./controller/login/login.controller");
const city_controller_1 = require("./controller/other/city.controller");
function Routing(router) {
    const tokenService = new token_service_1.Token();
    const driverController = new driver_controller_1.DriverController();
    router.post('/driver/updatedriver', driverController.updateDriver);
    router.put('/driver/socketid', tokenService.verifyToken, driverController.updateSocket);
    router.get('/driver/driverdetail/:driverid', driverController.getDriverDetails);
    router.post('/driver/getdriverlist', driverController.getDriverListPaging);
    router.post('/driver/getdata', driverController.getData);
    router.post('/driver/add', driverController.addDriver);
    router.post('/driver/edit', driverController.editDriver);
    router.post('/driver/delete', driverController.deleteDriver);
    router.get('/driver/getDriverSocketId', driverController.getDriverSocketId);
    const customerController = new customer_controller_1.CustomerController();
    router.put('/customer/socketid', tokenService.verifyToken, customerController.updateSocket);
    router.post('/customer/finddriver', tokenService.verifyToken, customerController.findDriver);
    router.post('/customer/estimatetrip', customerController.estimateTrip);
    router.post('/customer/history', customerController.getHistory);
    router.post('/customer/getdetails', customerController.getDetails);
    router.post('/customer/getemployeelist', customerController.getEmployeeList);
    const carController = new car_controller_1.CarController();
    router.post('/car/add', carController.addCar);
    router.post('/car/edit', carController.editCar);
    router.post('/car/carlist', carController.getCar);
    router.post('/car/driverpairing', carController.pairCarDriver);
    const loginController = new login_controller_1.LoginController();
    router.post('/driver/login', loginController.authorize_driver);
    router.post('/customer/login', loginController.authorize_employee);
    router.post('/corporate/login', loginController.authorize_web);
    const orderCtrl = new order_controller_1.OrderController();
    router.put('/order/cancelorder', orderCtrl.cancelOrder);
    router.put('/order/driverrating', orderCtrl.setDriverRating);
    const corporateCtrl = new corporate_controller_1.CorporateController();
    router.post('/corporate/getcorporatelist', corporateCtrl.getCorporateList);
    router.get('/corporate/detail/:corporateid', corporateCtrl.getCorporateDetail);
    router.post('/corporate/corporate', corporateCtrl.addCorporate);
    router.put('/corporate/corporate', corporateCtrl.updateCorporate);
    const userCtrl = new user_controller_1.UserController();
    router.post('/user/getdata', userCtrl.getUser);
    router.post('/user/add', userCtrl.addUser);
    router.post('/user/edit', userCtrl.editUser);
    router.post('/user/delete', userCtrl.deleteuser);
    const otherCtrl = new city_controller_1.OtherController();
    router.get('/other/citylist', otherCtrl.getCityList);
}
exports.Routing = Routing;
//# sourceMappingURL=route.js.map